document.body.addEventListener("htmx:load", function (evt) {
  initRegisterForm();
});

function initRegisterForm() {
  const form = document.getElementById("register-form");

  if (!form) {
    console.error("‚ùå –§–æ—Ä–º–∞ #register-form –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—ñ—Å–ª—è htmx:afterSwap");
    return;
  }
  if (form.dataset.listenerAttached) return;
  form.dataset.listenerAttached = "true";
  console.log("‚úÖ –§–æ—Ä–º–∞ –∑–Ω–∞–π–¥–µ–Ω–∞, –Ω–∞–≤—ñ—à—É—î–º–æ submit");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const user = {
      username: formData.get("username"),
      email: formData.get("email"),
      password: formData.get("password"),
    };

    console.log("üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", user);

    try {
      const res = await fetch("http://localhost:5000/auth/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(user),
      });

      const result = await res.json();
      console.log("üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:", result);

      if (res.ok) {
        alert(result.message);
      } else {
        alert(result.error || "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó");
      }
    } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ:", err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞.");
    }
  });
}
